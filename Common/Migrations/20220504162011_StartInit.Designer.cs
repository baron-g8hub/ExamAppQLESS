// <auto-generated />
using System;
using Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220504162011_StartInit")]
    partial class StartInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Common.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("RoleLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8a9feb7d-7c54-4f89-887a-7c6c40437783",
                            ConcurrencyStamp = "4fd945ea-6ea9-4590-b476-c958a8545c54",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            RoleLevel = 100
                        },
                        new
                        {
                            Id = "3d0e536b-4df8-4e34-96fa-5c0a2a2c23de",
                            ConcurrencyStamp = "22102af4-688e-4f90-b015-b8b3fe399a5c",
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            RoleLevel = 200
                        },
                        new
                        {
                            Id = "d2a1d8c3-b654-476a-b1d9-1d42e6ff69f6",
                            ConcurrencyStamp = "f0b4e969-54de-47f6-86bc-a9c3a3d7a850",
                            Name = "Clerk",
                            NormalizedName = "CLERK",
                            RoleLevel = 300
                        },
                        new
                        {
                            Id = "0a69c526-ed99-4cdc-9207-d981dbe380cd",
                            ConcurrencyStamp = "597acb76-16e4-47ba-b2d4-5e2973eb983d",
                            Name = "User",
                            NormalizedName = "USER",
                            RoleLevel = 400
                        });
                });

            modelBuilder.Entity("Common.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserUID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Common.Models.CardTransaction", b =>
                {
                    b.Property<Guid>("CardTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CardTransactionID");

                    b.Property<decimal?>("AmountChange")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountDiscounted")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountReceived")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("smallmoney");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TransportCardID")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCardTripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardTransactionID");

                    b.HasIndex("TransportCardID");

                    b.HasIndex("TransportCardTripID");

                    b.ToTable("CardTransactions");
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("EmployeeLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeUID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Property<string>("GeneratedUID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GeneratedUID");

                    b.Property<int>("GeneratedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneratedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneratedID"), 1001L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GeneratedUID");

                    b.ToTable("GenEmpUIDs");
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Property<int>("SmartCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmartCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmartCardID"), 1L, 1);

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("SmartCardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SmartCardID");

                    b.ToTable("RAWSMARTCARDs");
                });

            modelBuilder.Entity("Common.Models.TrainStation", b =>
                {
                    b.Property<Guid>("TrainStationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainStationID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TrainStationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainStationNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCardTripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TrainStationID");

                    b.HasIndex("TransportCardTripID");

                    b.ToTable("TrainStations");

                    b.HasData(
                        new
                        {
                            TrainStationID = new Guid("f2a7ee06-64a8-4f8d-979c-9684532169ab"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8411),
                            IsActive = true,
                            TrainStationCode = "ST1",
                            TrainStationNumber = 1,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8413)
                        },
                        new
                        {
                            TrainStationID = new Guid("30894685-fb9f-4c85-b191-1599eeb3ae56"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8430),
                            IsActive = true,
                            TrainStationCode = "ST2",
                            TrainStationNumber = 2,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8430)
                        },
                        new
                        {
                            TrainStationID = new Guid("60512051-4ee0-458e-badb-f2c852a9b06b"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8439),
                            IsActive = true,
                            TrainStationCode = "ST3",
                            TrainStationNumber = 3,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8440)
                        },
                        new
                        {
                            TrainStationID = new Guid("ee97077a-415a-429e-b90e-8feeb048d8c0"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8448),
                            IsActive = true,
                            TrainStationCode = "ST4",
                            TrainStationNumber = 4,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8448)
                        },
                        new
                        {
                            TrainStationID = new Guid("8fb3b0c6-4c8a-423c-b8df-510ecdc90cfe"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8520),
                            IsActive = true,
                            TrainStationCode = "ST5",
                            TrainStationNumber = 5,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8521)
                        },
                        new
                        {
                            TrainStationID = new Guid("1d5ba6aa-69e6-4cfa-9eba-a3308f916864"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8533),
                            IsActive = true,
                            TrainStationCode = "ST6",
                            TrainStationNumber = 6,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8533)
                        },
                        new
                        {
                            TrainStationID = new Guid("9b29500b-cc4c-4139-9a89-1ef8a1c0022f"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8542),
                            IsActive = true,
                            TrainStationCode = "ST7",
                            TrainStationNumber = 7,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8542)
                        },
                        new
                        {
                            TrainStationID = new Guid("b38da52d-6c33-49f3-897b-e2c5c8ce3d62"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8550),
                            IsActive = true,
                            TrainStationCode = "ST8",
                            TrainStationNumber = 8,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8550)
                        },
                        new
                        {
                            TrainStationID = new Guid("169fe3a1-5eca-483b-8e84-8f0d8ed35d97"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8559),
                            IsActive = true,
                            TrainStationCode = "ST9",
                            TrainStationNumber = 9,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8559)
                        },
                        new
                        {
                            TrainStationID = new Guid("8fb9416c-abfe-4183-952c-356367ae7a66"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8568),
                            IsActive = true,
                            TrainStationCode = "ST10",
                            TrainStationNumber = 10,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 4, 16, 20, 11, 104, DateTimeKind.Utc).AddTicks(8568)
                        });
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.Property<int>("TransportCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransportCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportCardID"), 1L, 1);

                    b.Property<string>("CardHolder")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPWDCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeniorCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("LoadBalance")
                        .HasColumnType("smallmoney");

                    b.Property<string>("PWDNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RAWSMARTCARDSmartCardID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SCCNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransportCardID");

                    b.HasIndex("RAWSMARTCARDSmartCardID");

                    b.ToTable("TransportCards");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.Property<Guid>("TransportCardTripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountTripCharge")
                        .HasColumnType("smallmoney");

                    b.Property<string>("DestinationStationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGateIN")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGateOUT")
                        .HasColumnType("bit");

                    b.Property<string>("OriginStationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TransportCardID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransportCardTripDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransportCardTripOperatorCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportCardTripID");

                    b.HasIndex("TransportCardID");

                    b.ToTable("TransportCardTrips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Common.Models.CardTransaction", b =>
                {
                    b.HasOne("Common.Models.TransportCard", "TransportCard")
                        .WithMany("CardTransactions")
                        .HasForeignKey("TransportCardID");

                    b.HasOne("Common.Models.TransportCardTrip", "TransportCardTrip")
                        .WithMany()
                        .HasForeignKey("TransportCardTripID");

                    b.Navigation("TransportCard");

                    b.Navigation("TransportCardTrip");
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.HasOne("Common.Models.GenEmpUID", "GenEmpUID")
                        .WithOne("Employee")
                        .HasForeignKey("Common.Models.Employee", "EmployeeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenEmpUID");
                });

            modelBuilder.Entity("Common.Models.TrainStation", b =>
                {
                    b.HasOne("Common.Models.TransportCardTrip", "TransportCardTrip")
                        .WithMany("TrainStations")
                        .HasForeignKey("TransportCardTripID");

                    b.Navigation("TransportCardTrip");
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.HasOne("Common.Models.RAWSMARTCARD", "RAWSMARTCARD")
                        .WithMany("TransportCards")
                        .HasForeignKey("RAWSMARTCARDSmartCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RAWSMARTCARD");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.HasOne("Common.Models.TransportCard", "TransportCard")
                        .WithMany("TransportCardTrips")
                        .HasForeignKey("TransportCardID");

                    b.Navigation("TransportCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Common.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Common.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Navigation("TransportCards");
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.Navigation("CardTransactions");

                    b.Navigation("TransportCardTrips");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.Navigation("TrainStations");
                });
#pragma warning restore 612, 618
        }
    }
}
