// <auto-generated />
using System;
using Common.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Common.DataAccess.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserUID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Common.Models.CardTransaction", b =>
                {
                    b.Property<Guid>("CardTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CardTransactionID");

                    b.Property<decimal?>("AmountChange")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountDiscounted")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountReceived")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("smallmoney");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TransportCardID")
                        .HasColumnType("int");

                    b.HasKey("CardTransactionID");

                    b.ToTable("CardTransactions", (string)null);
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("EmployeeLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeUID");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Property<string>("GeneratedUID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GeneratedUID");

                    b.Property<int>("GeneratedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneratedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneratedID"), 1001L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GeneratedUID");

                    b.ToTable("GenEmpUIDs", (string)null);
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Property<int>("SmartCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmartCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmartCardID"), 1L, 1);

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("SmartCardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SmartCardID");

                    b.ToTable("RAWSMARTCARDs", (string)null);
                });

            modelBuilder.Entity("Common.Models.TrainStation", b =>
                {
                    b.Property<Guid>("TrainStationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainStationID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TrainStationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainStationNumber")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TrainStationID");

                    b.ToTable("TrainStations", (string)null);

                    b.HasData(
                        new
                        {
                            TrainStationID = new Guid("bd6d6409-c2c3-43e5-8501-2f64d4db8b71"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4360),
                            IsActive = true,
                            TrainStationCode = "ST1",
                            TrainStationNumber = 1,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4363)
                        },
                        new
                        {
                            TrainStationID = new Guid("6fdbe6eb-d3f5-4444-a99f-0bec75ef41b1"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4446),
                            IsActive = true,
                            TrainStationCode = "ST2",
                            TrainStationNumber = 2,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4447)
                        },
                        new
                        {
                            TrainStationID = new Guid("1ef9ea2e-6920-4aa5-bf14-77bb26fb7370"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4593),
                            IsActive = true,
                            TrainStationCode = "ST3",
                            TrainStationNumber = 3,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4593)
                        },
                        new
                        {
                            TrainStationID = new Guid("2636e96d-a8ec-4f0e-b9a3-655d8ccb771a"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4619),
                            IsActive = true,
                            TrainStationCode = "ST4",
                            TrainStationNumber = 4,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4620)
                        },
                        new
                        {
                            TrainStationID = new Guid("d2bcea37-cb27-4539-af2f-7fe6465a2ded"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4637),
                            IsActive = true,
                            TrainStationCode = "ST5",
                            TrainStationNumber = 5,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4638)
                        },
                        new
                        {
                            TrainStationID = new Guid("49d5a3ea-5125-4c8f-8e64-10377e9e0721"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4680),
                            IsActive = true,
                            TrainStationCode = "ST6",
                            TrainStationNumber = 6,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4680)
                        },
                        new
                        {
                            TrainStationID = new Guid("3b82660a-a5da-4066-93e8-5e1773a8005f"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4698),
                            IsActive = true,
                            TrainStationCode = "ST7",
                            TrainStationNumber = 7,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4699)
                        },
                        new
                        {
                            TrainStationID = new Guid("7f4a28d5-0de0-4f78-b9d6-f03aad812ab6"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4716),
                            IsActive = true,
                            TrainStationCode = "ST8",
                            TrainStationNumber = 8,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4717)
                        },
                        new
                        {
                            TrainStationID = new Guid("2827a4b2-e935-4c53-aa7e-fa0ea20c9511"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4733),
                            IsActive = true,
                            TrainStationCode = "ST9",
                            TrainStationNumber = 9,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4734)
                        },
                        new
                        {
                            TrainStationID = new Guid("56335c16-925a-42ff-8ced-087a9a65fc73"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4754),
                            IsActive = true,
                            TrainStationCode = "ST10",
                            TrainStationNumber = 10,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 12, 3, 57, 952, DateTimeKind.Utc).AddTicks(4755)
                        });
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.Property<int>("TransportCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransportCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportCardID"), 1L, 1);

                    b.Property<string>("CardHolder")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPWDCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeniorCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("LoadBalance")
                        .HasColumnType("smallmoney");

                    b.Property<string>("PWDNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RAWSMARTCARDSmartCardID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SCCNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransportCardID");

                    b.HasIndex("RAWSMARTCARDSmartCardID");

                    b.ToTable("TransportCards", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TransportCardTransportCardTrip", b =>
                {
                    b.Property<Guid>("TransportCardTripsTransportCardTripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransportCardsTransportCardID")
                        .HasColumnType("int");

                    b.HasKey("TransportCardTripsTransportCardTripID", "TransportCardsTransportCardID");

                    b.HasIndex("TransportCardsTransportCardID");

                    b.ToTable("TransportCardTransportCardTrip", (string)null);
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.HasOne("Common.Models.GenEmpUID", "GenEmpUID")
                        .WithOne("Employee")
                        .HasForeignKey("Common.Models.Employee", "EmployeeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenEmpUID");
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.HasOne("Common.Models.RAWSMARTCARD", "RAWSMARTCARD")
                        .WithMany("TransportCards")
                        .HasForeignKey("RAWSMARTCARDSmartCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RAWSMARTCARD");
                });

          

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TransportCardTransportCardTrip", b =>
                {
                    b.HasOne("Common.Models.TransportCardTrip", null)
                        .WithMany()
                        .HasForeignKey("TransportCardTripsTransportCardTripID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.Models.TransportCard", null)
                        .WithMany()
                        .HasForeignKey("TransportCardsTransportCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Navigation("TransportCards");
                });

        
#pragma warning restore 612, 618
        }
    }
}
