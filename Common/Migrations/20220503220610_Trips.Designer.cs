// <auto-generated />
using System;
using Common.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Common.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220503220610_Trips")]
    partial class Trips
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Common.DataAccess.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserUID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Common.Models.CardTransaction", b =>
                {
                    b.Property<Guid>("CardTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CardTransactionID");

                    b.Property<decimal?>("AmountChange")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountDiscounted")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountReceived")
                        .HasColumnType("smallmoney");

                    b.Property<decimal?>("AmountTotal")
                        .HasColumnType("smallmoney");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TransportCardID")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCardTripID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CardTransactionID");

                    b.HasIndex("TransportCardID");

                    b.HasIndex("TransportCardTripID");

                    b.ToTable("CardTransactions");
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.Property<string>("EmployeeUID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeID"), 1L, 1);

                    b.Property<string>("EmployeeLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmployeeUID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Property<string>("GeneratedUID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("GeneratedUID");

                    b.Property<int>("GeneratedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneratedID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneratedID"), 1001L, 1);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GeneratedUID");

                    b.ToTable("GenEmpUIDs");
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Property<int>("SmartCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SmartCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmartCardID"), 1L, 1);

                    b.Property<DateTime?>("ActivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeactivatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsValid")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<string>("SmartCardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SmartCardID");

                    b.ToTable("RAWSMARTCARDs");
                });

            modelBuilder.Entity("Common.Models.TrainStation", b =>
                {
                    b.Property<Guid>("TrainStationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TrainStationID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TrainStationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainStationNumber")
                        .HasColumnType("int");

                    b.Property<Guid?>("TransportCardTripID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("TrainStationID");

                    b.HasIndex("TransportCardTripID");

                    b.ToTable("TrainStations");

                    b.HasData(
                        new
                        {
                            TrainStationID = new Guid("d5a29648-cc69-4de0-b48d-28a46904602b"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8303),
                            IsActive = true,
                            TrainStationCode = "ST1",
                            TrainStationNumber = 1,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8305)
                        },
                        new
                        {
                            TrainStationID = new Guid("8bf2005e-b99d-4f4f-bcd6-6a6fb7645950"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8418),
                            IsActive = true,
                            TrainStationCode = "ST2",
                            TrainStationNumber = 2,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8418)
                        },
                        new
                        {
                            TrainStationID = new Guid("85e33ee2-fbbc-4ee6-8251-b513f5a93f02"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8429),
                            IsActive = true,
                            TrainStationCode = "ST3",
                            TrainStationNumber = 3,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8430)
                        },
                        new
                        {
                            TrainStationID = new Guid("b492bbfe-ca87-421d-a995-25cc07c67c91"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8438),
                            IsActive = true,
                            TrainStationCode = "ST4",
                            TrainStationNumber = 4,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8438)
                        },
                        new
                        {
                            TrainStationID = new Guid("426d1f8a-b0b9-4cd4-aa3f-06c3613618c8"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8446),
                            IsActive = true,
                            TrainStationCode = "ST5",
                            TrainStationNumber = 5,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8447)
                        },
                        new
                        {
                            TrainStationID = new Guid("24823ea3-cded-4cc6-8883-b00bd5337c53"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8457),
                            IsActive = true,
                            TrainStationCode = "ST6",
                            TrainStationNumber = 6,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8458)
                        },
                        new
                        {
                            TrainStationID = new Guid("da335b27-f13f-4438-b2dc-e63f3989bbb5"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8467),
                            IsActive = true,
                            TrainStationCode = "ST7",
                            TrainStationNumber = 7,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8467)
                        },
                        new
                        {
                            TrainStationID = new Guid("4e5f651a-74b1-4003-a766-7aad6606ff6a"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8476),
                            IsActive = true,
                            TrainStationCode = "ST8",
                            TrainStationNumber = 8,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8476)
                        },
                        new
                        {
                            TrainStationID = new Guid("01b05b3d-1bc4-4799-97b9-0544bc62d6bb"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8486),
                            IsActive = true,
                            TrainStationCode = "ST9",
                            TrainStationNumber = 9,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8486)
                        },
                        new
                        {
                            TrainStationID = new Guid("bf6b46ab-2481-4827-9ae3-26a2a0ce8fbc"),
                            CreatedBy = "ADMIN",
                            CreatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8498),
                            IsActive = true,
                            TrainStationCode = "ST10",
                            TrainStationNumber = 10,
                            UpdatedBy = "ADMIN",
                            UpdatedDate = new DateTime(2022, 5, 3, 22, 6, 10, 645, DateTimeKind.Utc).AddTicks(8498)
                        });
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.Property<int>("TransportCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransportCardID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportCardID"), 1L, 1);

                    b.Property<string>("CardHolder")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPWDCard")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeniorCard")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("LoadBalance")
                        .HasColumnType("smallmoney");

                    b.Property<string>("PWDNumber")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("RAWSMARTCARDSmartCardID")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SCCNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("ValidityDate")
                        .HasColumnType("datetime");

                    b.HasKey("TransportCardID");

                    b.HasIndex("RAWSMARTCARDSmartCardID");

                    b.ToTable("TransportCards");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.Property<Guid>("TransportCardTripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountTripCharge")
                        .HasColumnType("smallmoney");

                    b.Property<string>("DestinationStationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasGateIN")
                        .HasColumnType("bit");

                    b.Property<bool>("HasGateOUT")
                        .HasColumnType("bit");

                    b.Property<string>("OriginStationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("TransportCardID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransportCardTripDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransportCardTripOperatorCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportCardTripID");

                    b.HasIndex("TransportCardID");

                    b.ToTable("TransportCardTrips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Common.Models.CardTransaction", b =>
                {
                    b.HasOne("Common.Models.TransportCard", "TransportCard")
                        .WithMany("CardTransactions")
                        .HasForeignKey("TransportCardID");

                    b.HasOne("Common.Models.TransportCardTrip", "TransportCardTrip")
                        .WithMany()
                        .HasForeignKey("TransportCardTripID");

                    b.Navigation("TransportCard");

                    b.Navigation("TransportCardTrip");
                });

            modelBuilder.Entity("Common.Models.Employee", b =>
                {
                    b.HasOne("Common.Models.GenEmpUID", "GenEmpUID")
                        .WithOne("Employee")
                        .HasForeignKey("Common.Models.Employee", "EmployeeUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenEmpUID");
                });

            modelBuilder.Entity("Common.Models.TrainStation", b =>
                {
                    b.HasOne("Common.Models.TransportCardTrip", "TransportCardTrip")
                        .WithMany("TrainStations")
                        .HasForeignKey("TransportCardTripID");

                    b.Navigation("TransportCardTrip");
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.HasOne("Common.Models.RAWSMARTCARD", "RAWSMARTCARD")
                        .WithMany("TransportCards")
                        .HasForeignKey("RAWSMARTCARDSmartCardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RAWSMARTCARD");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.HasOne("Common.Models.TransportCard", "TransportCard")
                        .WithMany("TransportCardTrips")
                        .HasForeignKey("TransportCardID");

                    b.Navigation("TransportCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Common.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Common.Models.GenEmpUID", b =>
                {
                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Common.Models.RAWSMARTCARD", b =>
                {
                    b.Navigation("TransportCards");
                });

            modelBuilder.Entity("Common.Models.TransportCard", b =>
                {
                    b.Navigation("CardTransactions");

                    b.Navigation("TransportCardTrips");
                });

            modelBuilder.Entity("Common.Models.TransportCardTrip", b =>
                {
                    b.Navigation("TrainStations");
                });
#pragma warning restore 612, 618
        }
    }
}
